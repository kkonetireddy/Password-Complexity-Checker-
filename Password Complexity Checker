#include <iostream>
#include <cstring>
#include <cctype>

using namespace std;

// Function to assess the strength of the password
int assess_password_strength(const string& password) 
{
    int length = password.length();
    bool has_lower = false, has_upper = false, has_digit = false, has_special = false;
    int score = 0;

    // Check password characteristics
    for (char ch : password) 
    {
        if (islower(ch)) has_lower = true;
        else if (isupper(ch)) has_upper = true;
        else if (isdigit(ch)) has_digit = true;
        else if (strchr("@$!%*?&#", ch)) has_special = true;
    }

    // Calculate score based on length and characteristics
    if (length >= 8) score += 2;
    if (length >= 12) score += 2;
    if (has_lower) score += 2;
    if (has_upper) score += 2;
    if (has_digit) score += 1;
    if (has_special) score += 2;

    if (score > 10) score = 10;
    return score;
}

// Function to provide feedback on how to improve the password
void provide_feedback(const string& password) 
{
    int length = password.length();
    bool has_lower = false, has_upper = false, has_digit = false, has_special = false;

    // Check password characteristics
    for (char ch : password) 
    {
        if (islower(ch)) has_lower = true;
        else if (isupper(ch)) has_upper = true;
        else if (isdigit(ch)) has_digit = true;
        else if (strchr("@$!%*?&#", ch)) has_special = true;
    }

    // Provide feedback based on missing characteristics
    cout << "\nFeedback:\n";
    if (length < 8) cout << "- Password should be at least 8 characters long.\n";
    if (!has_lower) cout << "- Password should contain at least one lowercase letter.\n";
    if (!has_upper) cout << "- Password should contain at least one uppercase letter.\n";
    if (!has_digit) cout << "- Password should contain at least one digit.\n";
    if (!has_special) cout << "- Password should contain at least one special character (@, $, !, %, *, ?, &, #).\n";
    if (length >= 8 && length < 12) cout << "- For extra security, consider using a password with 12 or more characters.\n";
    if (length >= 8 && has_lower && has_upper && has_digit && has_special) 
    {
        cout << "- Your password is strong!\n";
    }
}

// Function to assess password and provide feedback
void assess_and_give_feedback(const string& password) 
{
    int score = assess_password_strength(password);
    cout << "\nPassword Strength: ";

    // Display strength based on score
    if (score == 10) cout << "Very Strong (Score: 10/10)\n";
    else if (score >= 8) cout << "Strong (Score: " << score << "/10)\n";
    else if (score >= 6) cout << "Medium (Score: " << score << "/10)\n";
    else if (score >= 4) cout << "Weak (Score: " << score << "/10)\n";
    else cout << "Very Weak (Score: " << score << "/10)\n";

    provide_feedback(password);
}

int main() 
{
    string password;

    cout << "Password Strength Assessment Tool\n";
    cout << "Enter your password: ";
    cin >> password;  // Input password

    assess_and_give_feedback(password);

    return 0;
}
